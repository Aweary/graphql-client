/**
 * QueryManager
 * @private
 *
 * The query manager is responsible for diffing queries against
 * a store instance. It should be able to take a query AST returned
 * by `gql` or `graphql-tag` and recursively traverse each selectionSet,
 * generating a dataId as a pure function of the field's name and position
 * in the query.
 *
 * This dataId will be generated by `writeQueryToStore` in the exact same
 * way, so that fields/selectionSets writen to the store will be easily
 * queried here and removed from any future queries, to minimize the requested
 * payload when possible.
 */

import {
  logEachASTNode
} from '../util/logger'

const Document = 'Document'
const OperationDefinition = 'OperationDefinition'
const FragmentDefinition = 'FragmentDefinition'

function forEachSelectionSet(query, visitor, accumulator) {
  query.selectionSet.selections.forEach(selection => {
    const nextAccumulator = visitor(selection, accumulator)
    if (selection.selectionSet) {
      forEachSelectionSet(selection, visitor, nextAccumulator)
    }
  })
}

function diffQuerySelectionSets(query, shouldRemove) {
  const selections = query.selectionSet.selections;
  selections.forEach((selection, index) => {
    if (index === 0) {
      delete selections[0]
    }
  })
}


export type parsedOperationResults = {
  query: null | string,
  partialData?: Object,
  data?: Object,
}

export default class QueryManager {

  constructor({ store }) {
    this.store = store
  }

  diffQueryAgainstStore(operation) {
    const query = operation.definitions[0]
    this.diffSelectionAgainstStore({
      selection: query,
      dataId: 'ROOT_QUERY',
      store: this.store,
    })
    return diffQuerySelectionSets(query)
    // return operation
  }

  diffSelectionSetsAgainstStore({
    selection,
    dataId,
    store
  }) {
    console.log({ selection, dataId, store})
  }

  getFieldNameFromSelection(selection) {
    return selection.name.value
  }

  diffQuery(queryAST) {
    if (queryAST.kind !== Document) {
      throw new Error(
        'QueryManager.diffQuery(...): unable to parse ' +
        'document with kind ' + queryAST.kind + '. Expected ' +
        'a Document.'
      )
    }

    if (!queryAST.definitions.length) {
      throw new Error(
        'QueryManager.diffQuery(...): cannot parse empty queries.'
      )
    }
    const diffedAST = this.diffQueryAgainstStore(queryAST)
    return diffedAST

  }

}
